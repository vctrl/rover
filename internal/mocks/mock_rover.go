// Code generated by MockGen. DO NOT EDIT.
// Source: mars-rover/internal/app (interfaces: Rover)

// Package mocks is a generated GoMock package.
package mocks

import (
	models "mars-rover/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRover is a mock of Rover interface.
type MockRover struct {
	ctrl     *gomock.Controller
	recorder *MockRoverMockRecorder
}

// MockRoverMockRecorder is the mock recorder for MockRover.
type MockRoverMockRecorder struct {
	mock *MockRover
}

// NewMockRover creates a new mock instance.
func NewMockRover(ctrl *gomock.Controller) *MockRover {
	mock := &MockRover{ctrl: ctrl}
	mock.recorder = &MockRoverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRover) EXPECT() *MockRoverMockRecorder {
	return m.recorder
}

// GetCurrentDirection mocks base method.
func (m *MockRover) GetCurrentDirection() models.Direction {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentDirection")
	ret0, _ := ret[0].(models.Direction)
	return ret0
}

// GetCurrentDirection indicates an expected call of GetCurrentDirection.
func (mr *MockRoverMockRecorder) GetCurrentDirection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentDirection", reflect.TypeOf((*MockRover)(nil).GetCurrentDirection))
}

// GetCurrentPosition mocks base method.
func (m *MockRover) GetCurrentPosition() models.Coordinates {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentPosition")
	ret0, _ := ret[0].(models.Coordinates)
	return ret0
}

// GetCurrentPosition indicates an expected call of GetCurrentPosition.
func (mr *MockRoverMockRecorder) GetCurrentPosition() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentPosition", reflect.TypeOf((*MockRover)(nil).GetCurrentPosition))
}

// Move mocks base method.
func (m *MockRover) Move(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Move", arg0)
}

// Move indicates an expected call of Move.
func (mr *MockRoverMockRecorder) Move(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Move", reflect.TypeOf((*MockRover)(nil).Move), arg0)
}

// PerformRoute mocks base method.
func (m *MockRover) PerformRoute(arg0 []models.Move) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PerformRoute", arg0)
}

// PerformRoute indicates an expected call of PerformRoute.
func (mr *MockRoverMockRecorder) PerformRoute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PerformRoute", reflect.TypeOf((*MockRover)(nil).PerformRoute), arg0)
}

// Rotate mocks base method.
func (m *MockRover) Rotate(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Rotate", arg0)
}

// Rotate indicates an expected call of Rotate.
func (mr *MockRoverMockRecorder) Rotate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rotate", reflect.TypeOf((*MockRover)(nil).Rotate), arg0)
}
