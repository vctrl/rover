// Code generated by MockGen. DO NOT EDIT.
// Source: mars-rover/internal/app (interfaces: Optimizer)

// Package mocks is a generated GoMock package.
package mocks

import (
	models "mars-rover/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockOptimizer is a mock of Optimizer interface.
type MockOptimizer struct {
	ctrl     *gomock.Controller
	recorder *MockOptimizerMockRecorder
}

// MockOptimizerMockRecorder is the mock recorder for MockOptimizer.
type MockOptimizerMockRecorder struct {
	mock *MockOptimizer
}

// NewMockOptimizer creates a new mock instance.
func NewMockOptimizer(ctrl *gomock.Controller) *MockOptimizer {
	mock := &MockOptimizer{ctrl: ctrl}
	mock.recorder = &MockOptimizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOptimizer) EXPECT() *MockOptimizerMockRecorder {
	return m.recorder
}

// OptimizeRoute mocks base method.
func (m *MockOptimizer) OptimizeRoute(arg0 string) ([]models.Move, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OptimizeRoute", arg0)
	ret0, _ := ret[0].([]models.Move)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OptimizeRoute indicates an expected call of OptimizeRoute.
func (mr *MockOptimizerMockRecorder) OptimizeRoute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OptimizeRoute", reflect.TypeOf((*MockOptimizer)(nil).OptimizeRoute), arg0)
}
